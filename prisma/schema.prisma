generator client {
  provider = "prisma-client-js"
  output   = "../lib/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String         @id @default(cuid())
  username   String
  email      String         @unique
  password   String
  role       Role           @default(USER)
  points     Int            @default(0)
  Attendance Attendance[]
  accounts   Account[]
  sessions   Session[]

  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String       @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String       @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Events {
  id Int @id @default(autoincrement())
  title String
  description String
  location String
  startDate DateTime @default(now())
  endDate DateTime
  points Int
  code String
  Attendance Attendance[]
}

model Attendance {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID String
  event Events @relation(fields: [eventID], references: [id], onDelete: Cascade)
  eventID Int
  attendedAt DateTime @default(now())
}